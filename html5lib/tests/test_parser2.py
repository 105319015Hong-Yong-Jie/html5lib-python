from __future__ import absolute_import, division, unicode_literals

import io

import pytest

from . import support  # flake8: noqa
from html5lib import html5parser
from html5lib.constants import namespaces
from html5lib import treebuilders


# tests that aren't autogenerated from text files
@pytest.fixture
def dom_tree():
    return treebuilders.getTreeBuilder("dom")


def test_assertDoctypeCloneable(dom_tree):
    parser = html5parser.HTMLParser(tree=dom_tree)
    doc = parser.parse('<!DOCTYPE HTML>')
    assert doc.cloneNode(True) is not None


def test_line_counter(dom_tree):
    # http://groups.google.com/group/html5lib-discuss/browse_frm/thread/f4f00e4a2f26d5c0
    parser = html5parser.HTMLParser(tree=dom_tree)
    parser.parse("<pre>\nx\n&gt;\n</pre>")


def test_namespace_html_elements_0_dom(dom_tree):
    parser = html5parser.HTMLParser(tree=dom_tree, namespaceHTMLElements=True)
    doc = parser.parse("<html></html>")
    assert doc.childNodes[0].namespaceURI == namespaces["html"]


def test_namespace_html_elements_1_dom(dom_tree):
    parser = html5parser.HTMLParser(tree=dom_tree, namespaceHTMLElements=False)
    doc = parser.parse("<html></html>")
    assert doc.childNodes[0].namespaceURI is None


def test_namespace_html_elements_0_etree():
    parser = html5parser.HTMLParser(namespaceHTMLElements=True)
    doc = parser.parse("<html></html>")
    assert doc.tag == "{%s}html" % (namespaces["html"],)


def test_namespace_html_elements_1_etree():
    parser = html5parser.HTMLParser(namespaceHTMLElements=False)
    doc = parser.parse("<html></html>")
    assert doc.tag == "html"


def test_unicode_file():
    parser = html5parser.HTMLParser()
    parser.parse(io.StringIO("a"))
